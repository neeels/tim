#!/usr/bin/env python
# coding: utf8
#
# Tim
# ===
# 
# project timer (GUI + cmdline)
# 
# You enter project names and start and stop them.
# Tim will keep track of how much you worked (and when) and how many of these
# worked hours you have already submitted to your money supplier.
# 
# (c) Copyright 2013 by Neels Janosch Hofmeyr <neels@hofmeyr.de> (GPLv3)
# 
# This file is part of Tim project timer.
# 
# Tim project timer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tim project timer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tim project timer.  If not, see <http://www.gnu.org/licenses/>.

r'''Tim project timer, test suite.

Simply run this script to perform all tests.

Tests exist only as shell scripts with expected stdout and stderr output.
Each test is a single file, starting off with shell commands and ending with
the expected outputs, each section marked by a specific line of text.

In the tests' shell commands, Tim should be invoked by the 'tim' command. The
testing code will automatically redirect to the tim script to be tested.
'''

import os, time, errno, sys, traceback, subprocess, difflib, shutil, re
from os.path import join as j

# some of this code repeats code that is in tim already. But I'm consciously
# not importing those, because I want to test that code. Rather keep separate
# implementations here for the test suite.

DATE_RE = r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}'
TIMESTR_FORMAT = "%Y-%m-%d %H:%M:%S"
def time2str(float_time=None, fmt=TIMESTR_FORMAT):
  if float_time is not None:
    float_time = float(float_time)
  return time.strftime(fmt, time.localtime(float_time))

def str2time(string):
  if not string or len(string) < 1:
    return None
  if len(string) <= 10:
    fmt = '%Y-%m-%d'
  elif len(string) <= 13:
    fmt = '%Y-%m-%d %H'
  else:
    fmt = '%Y-%m-%d %H:%M'
  return time.mktime( time.strptime(string, fmt) )

FILENAME_TIMESTAMP_FORMAT = "%Y_%m_%d__%H_%M_%S"
def filename_timestamp(float_time=None):
  return time2str(float_time, fmt=FILENAME_TIMESTAMP_FORMAT)

def msgs2str(*msgs):
  return ''.join([str(m) for m in msgs])

class ExnBase(Exception):
  def __init__(self, *msgs):
    self.msg = msgs2str(*msgs)
  def __str__(self):
    return '*** ' + self.msg

class FatalTestError(ExnBase):
  pass

class TestError(ExnBase):
  pass

def _raise(*msgs):
  raise TestError(*msgs)

def _fail(*msgs):
  raise FatalTestError(*msgs)

def write_file(path, contents, mkdirs=True):
  if mkdirs:
    dirname = os.path.dirname(path)
    if not os.path.exists(dirname):
      os.makedirs(dirname)
  f = open(path, "w")
  f.write(contents)
  f.flush()
  os.fsync(f.fileno())
  f.close()

def append_to_file(path, *contents):
  f = open(path, "a")
  for c in contents:
    f.write(c)
  f.close()

def read_file(path):
  try:
    f = open(path, "r")
    contents = f.read()
    f.close()
    return contents
  except IOError:
    return None

def read_file_lines(path):
  try:
    f = open(path, "r")
    contents = f.readlines()
    f.close()
    return contents
  except IOError:
    return None

def run_shell_script(script, env=None, cwd=None):
  stdout, stderr = subprocess.Popen(script,
                                    shell=True,
                                    env=env,
                                    cwd=cwd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE).communicate()
  return stdout, stderr


def diff_expectations(expected, actual):
  return '\n'.join(difflib.ndiff(expected, actual))

# TestRunner #################################################################

class TestRunner:
  OUT_LINE = '#O '
  ERR_LINE = '#E '
  LOG_TIMESTAMP_FORMAT = TIMESTR_FORMAT

  def __init__(self, tests_dir, tim_bin, work_dir_base, log_writer,
               log_timestamps=False, keep_failed_tests=False,
               do_update=False, verbose=False):
    self.tim_bin = os.path.abspath(tim_bin)
    self.work_dir_base = os.path.abspath(work_dir_base)
    self.tests_dir = os.path.abspath(tests_dir)
    self.log_writer = log_writer
    self.log_timestamps = log_timestamps
    self.keep_failed_tests = keep_failed_tests
    self.do_update = do_update
    self.verbose = verbose
    self.tests_run = []
    self.tests_failed = []
    self.tests_passed = []
    self.tests_updated = []
    self.work_dir = None
    
  def get_work_dir(self):
    if self.work_dir is None:
      self.work_dir = self.tempdir()
    return self.work_dir

  def log(self, *msgs):
    if self.log_timestamps:
      self.log_writer.write(time2str(fmt=TestRunner.LOG_TIMESTAMP_FORMAT))
      self.log_writer.write(': ')
    self.log_writer.write(msgs2str(*msgs))
    self.log_writer.write('\n')
    self.log_writer.flush()

  def log_cmd(self, cmd, stdout, stderr):
    if cmd is not None:
      self.log('> ', cmd)
    if stdout:
      if not isinstance(stdout, str):
        stdout = '\n'.join(stdout)
      self.log('--STDOUT--\n', stdout)
    if stderr:
      if not isinstance(stderr, str):
        stderr = '\n'.join(stderr)
      self.log('--STDERR--\n', stderr)
    if stdout or stderr:
      self.log('--')

  def ensure_parent_dir(self, path):
    parent = os.path.dirname(path)
    if not os.path.isdir(parent):
      os.makedirs(parent)

  def new_dir(self, *path_elements):
    dir_path = j(*path_elements)
    self.ensure_parent_dir(dir_path)
    os.mkdir(dir_path)
    return dir_path

  def new_file(self, path_elements):
    file_path = j(*path_elements)
    self.ensure_parent_dir(file_path)
    f = open(file_path, 'a')
    f.close()
    return file_path

  def timestamp_path(self, in_dir=None,
                     prefix=None, suffix=None,
                     create_file=False, create_dir=False):
    assert(not(create_file and create_dir))
    p = None
    tries = 3
    if in_dir is None:
      in_dir = self.work_dir_base

    success = False
    while not success:
      base_name = ''.join((prefix or '', filename_timestamp(), suffix or '',))
      p = j(in_dir, base_name)
      try:
        if create_file:
          self.new_file(p)
          success = True
        elif create_dir:
          self.new_dir(p)
          success = True
        else:
          success = not os.path.exists(p)
      except OSError as e:
        if e.errno == errno.EEXIST:
          if tries < 1:
            _raise("Unable to create temporary path in dir '", in_dir, "'")
          else:
            tries -= 1
          time.sleep(1)
          continue
        else:
          raise
    return p
    
  def tempdir(self, in_dir=None, prefix=None, suffix=None):
    return self.timestamp_path(in_dir=in_dir, create_dir=True, prefix=prefix,
                               suffix=suffix)

  def get_all_available_test_names(self):
    files = os.listdir(self.tests_dir)
    return [name for name in files
            if (not name.startswith('.'))
               and os.path.isfile(j(self.tests_dir, name))]
    
  def run_many(self, test_names):
    for name in test_names:
      self.run(name)

  def get_test_path(self, test_name):
    return j(self.tests_dir, test_name)

  def get_test(self, test_name):
    return TestRunner.TestReader(test_name, self.get_test_path(test_name)
                                ).get()

  class TestReader:
    def __init__(self, name, path):
      self.name = name
      self.path = os.path.abspath(path)
      self.test = []

      self.line = None
      self.cmd = []
      self.cmd_out = []
      self.cmd_err = []

      self.after = []

      self.read()

    def get(self):
      return self.test

    def flush(self):
      if self.cmd:
        self.test.append((self.line, self.cmd, self.cmd_out, self.cmd_err))
      self.test.extend(self.after)
      self.line = None
      self.cmd = None
      self.cmd_out = []
      self.cmd_err = []
      self.after = []

    def read(self):
      def stripnl(line):
        if line.endswith('\n'):
          return line[:-1] or ''
        return line

      lines = read_file_lines(self.path)
      if lines is None:
        _raise('no such test: ', self.path)

      lines = [stripnl(l) for l in lines]
      for i, line in enumerate(lines):
        if line.startswith(TestRunner.OUT_LINE):
          if not self.cmd:
            _raise('test file has an output line without a prior command ',
                   "('", self.name, "', line ", i + 1, ')')
          if self.cmd_out is None:
            _raise('prior command starts with a dash. All output is ignored.',
                   ' So, no expected output makes sense.',
                   "('", self.name, "', line ", i + 1, ')')
          self.cmd_out.append(line[3:])

        elif line.startswith(TestRunner.ERR_LINE):
          if not self.cmd:
            _raise('test file has an output line without a prior command ',
                   "('", self.name, "', line ", i + 1, ')')
          if self.cmd_err is None:
            _raise('prior command starts with a dash. All output is ignored.',
                   ' So, no expected output makes sense.',
                   "('", self.name, "', line ", i + 1, ')')
          self.cmd_err.append(line[3:])
        else:

          if line.startswith('#') or not line:
            self.after.append((line, None, None, None))
          else:
            self.flush()
            self.line = line
            self.cmd = line
            if self.cmd.startswith('-'):
              self.cmd_out = None
              self.cmd_err = []
              self.cmd = self.cmd[1:]

      self.flush()

  WARP_TO = 'WARP TO '
  PRESENT = 'PRESENT'
  def get_mangled_test(self, test_name, work_dir):
    test = self.get_test(test_name)
    mangled = []

    timewarp = None
    for line, cmd, out, err in test:
      try:
        if cmd:
          if cmd.startswith(TestRunner.WARP_TO):
            to_str = cmd[len(TestRunner.WARP_TO):]
            if TestRunner.PRESENT == to_str:
              timewarp = None
            else:
              timewarp = str2time(to_str) - time.time()
            cmd = None
          elif cmd.startswith('tim'):
            timewarp_arg = ''
            if timewarp:
              timewarp_arg = '--timewarp=%d' % timewarp
            cmd = ' '.join((self.tim_bin,
                            '--base', "'" + work_dir + "'",
                            timewarp_arg,
                            cmd[3:]))
        mangled.append((line, cmd, out, err))
      except Exception as e:
        _raise("EXCEPTION while reading test '", test_name, "' on line\n  ",
               line, '\n',
               traceback.format_exc())
    return mangled

  def match(self, expect, actual):
    if expect is None:
      return True

    # remove debug lines
    actual = [a for a in actual if not a.startswith('####### ')]

    # handle the '#O ...' case, matching any one or more lines to the end.
    if expect and (expect[-1] == '...') and (len(actual) >= len(expect)):
      actual = actual[:len(expect)-1]
      expect = expect[:len(expect)-1]
      sys.stdout.flush()

    if len(expect) != len(actual):
      return False
    for e, a in zip(expect, actual):
      if e.startswith('^'):
        if not e.endswith('$'):
          e = e + '$'
        if not re.match(e, a):
          return False
      else:
        if e != a:
          return False
    return True

  def save_test(self, test_name, test):
    path = self.get_test_path(test_name)
    result = []
    for line, cmd, out, err in test:
      result.append(line)
      if out:
        result.extend([ (TestRunner.OUT_LINE + l) for l in out
                        if not l.startswith('####### ')])
      if err:
        result.extend([ (TestRunner.ERR_LINE + l) for l in err ])
    result.append('') # final newline
    write_file(path, '\n'.join(result))

  def run(self, test_name):
    #self.log('* ', test_name, ' ', '*' * (80 - 2 - 2- len(test_name)))
    self.tests_run.append(test_name)

    work_dir = self.get_work_dir()
    test_work = None

    failed = False
    test = None

    test_work = None
    try:
      test_work = self.new_dir(work_dir, test_name)
      test = self.get_mangled_test(test_name, test_work)
      env = { 'HOME': os.path.abspath(test_work) }
    except Exception as e:
      if test_work:
        try:
          os.rmdir(test_work)
        except:
          pass
      self.log(str(e),
               "\nFAIL: '", test_name, "', while reading test script")
      self.tests_failed.append(test_name)
      return


    def mangle_output(output, verbatim_dates):
      if verbatim_dates:
        return output.splitlines()
      mangled = []
      for l in output.splitlines():
        tokens = []
        for token in re.split(DATE_RE, l):
          tokens.append(token)
          tokens.append('DATE')
        if tokens:
          del tokens[-1]
        mangled.append(''.join(tokens))
      return mangled


    failures = []
    verbatim_dates = True
    for i,entry in enumerate(test):
      line, cmd, expect_stdout, expect_stderr = entry
      if not cmd:
        continue

      if cmd == 'VERBATIM DATES':
        verbatim_dates = True
        continue
      elif cmd == 'MANGLE DATES':
        verbatim_dates = False
        continue

      try:
        if self.verbose:
          self.log_cmd(cmd, None, None)
        stdout, stderr = run_shell_script(cmd, env, cwd=test_work)
        if self.verbose:
          self.log_cmd(None, stdout, stderr)
        if expect_stdout is None:
          if stderr:
            _fail('Error output from hidden test command:\n',
                  line, '\n',
                  stderr)
          continue
        stdout = mangle_output(stdout, verbatim_dates)
        stderr = mangle_output(stderr, verbatim_dates)

        # remove debug stacktrace from stderr
        for erri,errline in enumerate(stderr):
          if errline == '----- stacktrace -----':
            stderr = stderr[:erri]
            break

        this_line_failed = False
        if not self.match(expect_stdout, stdout):
          failures.append((i, line, msgs2str(
            'stdout mismatches:                --- expect   +++ actual\n',
            diff_expectations(expect_stdout, stdout)
            )))
          this_line_failed = True
        if not self.match(expect_stderr, stderr):
          failures.append((i, line, msgs2str(
            'stderr mismatches:                --- expect   +++ actual\n',
            diff_expectations(expect_stderr, stderr)
            )))
          this_line_failed = True
        if this_line_failed:
          if self.do_update:
            test[i] = (line, cmd, stdout, stderr)
            self.log('** Updating test ', test_name, ':')
            self.log_cmd(line, stdout, stderr)
          else:
            break
      except Exception as e:
        failures.append((i, line, traceback.format_exc()))
        break

    if (not (self.keep_failed_tests and failures)
       ) and os.path.isdir(test_work):
      try:
        time.sleep(0.1)
        shutil.rmtree(test_work)
      except OSError as e:
        self.log('*** Failed to remove directory: ', test_work)

    if self.do_update and failures:
      self.save_test(test_name, test)
      self.log("** Updated test '", test_name, "'")
      self.tests_updated.append(test_name)
      return True

    if failures:
      last_linenr = None
      for i, line, failmsg in failures:
        if i != last_linenr:
          self.log("FAIL: '", test_name, "' on line ",
                   i+1, ':\n', line)
          last_linenr = i
        self.log('*** ', failmsg)
      self.tests_failed.append(test_name)
      return False

    self.log('pass: \'', test_name, "'")
    self.tests_passed.append(test_name)
    return True

  def clean(self):
    if self.work_dir is None:
      return
    try:
      os.rmdir(self.work_dir)
    except OSError as e:
      if e.errno != errno.ENOTEMPTY:
        raise
      self.log('*** EXCEPTION while cleaning up after tests: ',
               traceback.format_exc() )
      self.log('*** Kept tests work: ', self.work_dir)
      pass


  def summary(self):
    l_run = len(self.tests_run)
    l_failed = len(self.tests_failed)
    l_passed = len(self.tests_passed)
    l_updated = len(self.tests_updated)
    if l_run != (l_passed + l_failed + l_updated):
      self.log('Weird. ', l_run, ' tests run, but failed tests (',
               l_failed, ') + passed tests (', l_passed, ') + updated tests (',
               l_updated, ') = ', l_failed + l_passed + l_updated)
    self.log('\n tests run: ', l_run)
    if l_updated:
      if l_updated == l_run:
        self.log('** all updated.')
      else:
        self.log('** updated: ', l_updated, ' -- ',
                 ' '.join([str(t) for t in self.tests_updated]))
    if l_passed:
      if l_passed == l_run:
        self.log('all passed.')
      else:
        self.log('    passed: ', l_passed)
    if l_failed:
      self.log('    FAILED: ', l_failed, ' -- ',
               ' '.join([str(t) for t in self.tests_failed]))
      return 1
    return 0


if __name__ == "__main__":
  # run commandline client.

  from optparse import OptionParser

  p = OptionParser()
  p.add_option('-s', '--src', dest='tim_bin',
               help="path to the 'tim' script.",
               default=j('..', 'src', 'tim'))
  p.add_option('-w', '--work-dir', dest='work_dir_base',
               help='path to put temporary files for tests.',
               default='work')
  p.add_option('-l', '--log-file', dest='log_file_path',
               help='file path to append log output to. Logs are written to '
                   +'stdout by default.',
               default=None)
  p.add_option('-t', '--tests-dir', dest='tests_dir',
               help='dir where tests are located',
               default=j('.', 'scripts'))
  p.add_option('-k', '--keep-failed-test-files', dest='keep_failed_tests',
               help='if true, work dirs for failed tests are not deleted',
               action='store_true',
               default=False)
  p.add_option('-u', '--update', dest='do_update',
               help='overwrite test expectations with actual output. This is '
                  + '"dangerous" in that it overwrites the test script file.',
               action='store_true',
               default=False)
  p.add_option('-v', '--verbose', dest='verbose',
               help='print full actual test output',
               action='store_true',
               default=False)

  options, args = p.parse_args()

  log_writer = None
  if options.log_file_path:
    log_writer = open(options.log_file_path, 'a')
  else:
    log_writer = sys.stdout

  r = TestRunner(options.tests_dir, options.tim_bin,
                 options.work_dir_base, log_writer,
                 keep_failed_tests=options.keep_failed_tests,
                 do_update=options.do_update,
                 verbose=options.verbose)

  if not args:
    if options.do_update:
      _raise('please supply explicit test names with -u')
    args = sorted(r.get_all_available_test_names())

  r.run_many(args)
  xcode = r.summary()
  r.clean()
  exit(xcode)
